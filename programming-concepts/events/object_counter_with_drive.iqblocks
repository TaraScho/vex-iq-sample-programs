{"mode":"Blocks","hardwareTarget":"brain","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable><variable id=\"_#qXF,G/rM)sRLa*Lt/`\">count</variable><variable type=\"broadcast_msg\" id=\"CuO,s.)3V~s[xt~mFX20\">message1</variable></variables><comment id=\"2m)16?y+f(2?oM]D2Tl:\" x=\"158\" y=\"990\" h=\"349\" w=\"426\">Name:\n\nDate:\n\nClass:\n\nBrain Supported: 2nd generation\n\nConfiguration:\nBaseBot with Sensors (Drivetrain 2-motor, Inertial)\nLeft Motor in Port 1 \nRight Motor in Port 6\nTouchLED in Port 2\nOptical Sensor in Port 3\nDistance Sensor in Port 7\nBumper Switch in Port 8</comment><block type=\"iq_events_when_brain_button\" id=\"N=j[@/{$nH]C)EL1s!4}\" x=\"650\" y=\"-110\"><field name=\"BUTTON\">Down</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_variables_change_variable\" id=\"IFU|7PtYZC![mn{U?=r@\"><field name=\"VARIABLE\" id=\"_#qXF,G/rM)sRLa*Lt/`\">count</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"]C38(WOeY$tu/uF^viwk\"><field name=\"NUM\">1000</field></shadow></value><next><block type=\"iq_looks_clear_all_rows_new\" id=\"U+pVGDSP*eZ4x6~q|LXh\"><field name=\"TARGET\">Brain</field><next><block type=\"iq_looks_set_pen_color\" id=\"y59P-.]b`8(QhJg=wbM[\"><field name=\"COLOR\">red</field><field name=\"TARGET\">Brain</field><next><block type=\"iq_looks_set_touchled_color\" id=\"J-=#L*OORTL18xJ5Lt;a\"><field name=\"TOUCHLED\">TouchLED11</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"(Gd]^#ufn*G!ZDCT?;C*\"><field name=\"COLOR\">red</field></shadow></value><next><block type=\"iq_looks_set_cursor_new\" id=\"177$o%r7xPlupmciW5hL\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"?l#J74U$[y1vcUy1X18P\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"y2i-hCL=pfs(xPs~@Kl)\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"ti(*)*l2m*@@$G^xU0J;\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"H0vG[Lpu^Ey9Q//jRz9|\"><field name=\"TEXT\">HACKED</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"g$MEMVLDB{L$REs#f;H`\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\" id=\"G_BtQ;d*YFvWT-[zAU!5\"><field name=\"TEXT\">1000 points added</field></shadow></value><next><block type=\"iq_control_wait\" id=\"2^uAJLe^?^o?jT6g^.rv\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"OKrj[GmVD`jg8XX6_sNi\"><field name=\"NUM\">5</field></shadow></value><next><block type=\"iq_looks_set_touchled_color\" id=\"s,psu,0$n?ef=Nq*5+[,\"><field name=\"TOUCHLED\">TouchLED11</field><value name=\"COLOR\"><shadow type=\"iq_looks_colorlist\" id=\"t;yW%d]rn:w=c_HZNi#/\"><field name=\"COLOR\">none</field></shadow></value><next><block type=\"iq_looks_set_pen_color\" id=\"!7-Ggy:T`dkK!_=KC6$f\"><field name=\"COLOR\">white</field><field name=\"TARGET\">Brain</field><next><block type=\"iq_looks_clear_all_rows_new\" id=\";H4t[!K%rL`b+/Urs+m%\"><field name=\"TARGET\">Brain</field><next><block type=\"iq_looks_set_cursor_new\" id=\"9aIv@69^rHiLCG@eJSg?\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"M70xqGI2b{OQ1aFr+ff]\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"6e3nPel5zEWgHi}T8L%)\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"-10\" y=\"31\"><next><block type=\"iq_drivetrain_drive\" id=\"$|)J@+muKL,RfQN^sNnE\"><field name=\"DIRECTION\">fwd</field><next><block type=\"iq_control_forever\" id=\"%tmmN.KI_QWcm;w$y|;z\"><statement name=\"SUBSTACK\"><block type=\"iq_control_if_then\" id=\"8kt2]{04`)22;6`n}`i3\"><value name=\"CONDITION\"><block type=\"iq_operator_less_than\" id=\"}~}!H,f$lJ~3kL8$Qc30\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"JRr_~4Xpx2aA%t{G_}xQ\"><field name=\"NUM\">0</field></shadow><block type=\"iq_sensing_distance_object_distance\" id=\"SoT_KYXO3Dw8*pCXSyIX\"><field name=\"DISTANCE\">Distance6</field><field name=\"UNITS\">in</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"$p(n3kpK=o]m^r*0o@b2\"><field name=\"NUM\">6</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"iq_variables_change_variable\" id=\"U3{Rn$FI+Iao^eN9,knj\"><field name=\"VARIABLE\" id=\"_#qXF,G/rM)sRLa*Lt/`\">count</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"S*5Y)4M`3{m5G;FRqKL=\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"!RN}(!)SjDd~V?mtH~Yo\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">true</field><value name=\"DATA\"><shadow type=\"text\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_variables_variable\" id=\"F1ju)melBWCQ^=Q_:.{~\"><field name=\"VARIABLE\" id=\"_#qXF,G/rM)sRLa*Lt/`\">count</field></block></value><next><block type=\"iq_control_wait_until\" id=\"(jD`9]Y}XyUv#8ZI$d;I\"><value name=\"CONDITION\"><block type=\"iq_operator_greater_than\" id=\"}2ghM(zi+59Rt+NbV.7m\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"Z.j:%h6cTyrQxD/grP,F\"><field name=\"NUM\">0</field></shadow><block type=\"iq_sensing_distance_object_distance\" id=\"ufTlkY!+@eumtn}w::3O\"><field name=\"DISTANCE\">Distance6</field><field name=\"UNITS\">in</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"nebwR5aAp%KK!rDE=@m5\"><field name=\"NUM\">12</field></shadow></value></block></value></block></next></block></next></block></statement></block></statement></block></next></block></next></block><block type=\"iq_events_when_brain_button\" id=\"-w2e(p@OO~Xk)T4a8D|?\" x=\"-10\" y=\"510\"><field name=\"BUTTON\">Up</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_variables_set_variable\" id=\"z!SZ7tCuEJ{o3JJ{NpyP\"><field name=\"VARIABLE\" id=\"_#qXF,G/rM)sRLa*Lt/`\">count</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"2VOvPZqy/GI0nny+P{ST\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_looks_print_new\" id=\"U%cMpeSb`^,_=1s#RFH|\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"~bHHOLcDl@,XzHkL~XXo\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"iq_variables_variable\" id=\")x5=yehlr9:--Fk,6p3-\"><field name=\"VARIABLE\" id=\"_#qXF,G/rM)sRLa*Lt/`\">count</field></block></value></block></next></block></next></block><block type=\"iq_events_when_touchled\" id=\"a*;z:oP16.FEfukh~JyU\" x=\"-10\" y=\"750\"><field name=\"TOUCHLED\">TouchLED11</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_looks_set_cursor_new\" id=\"t~%oYWQwvy%LOsVUFgac\"><field name=\"TARGET\">Brain</field><value name=\"ROW\"><shadow type=\"math_whole_number\" id=\"L,,K:.Phy^Phv{=iH%7;\"><field name=\"NUM\">1</field></shadow></value><value name=\"COLUMN\"><shadow type=\"math_whole_number\" id=\"%(Yf1+dTORrp?=F]!)~%\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"iq_looks_clear_all_rows_new\" id=\"mFTGKs[$%]QQIR-_tP6_\"><field name=\"TARGET\">Brain</field></block></next></block></next></block></xml>","robotConfig":[{"port":[7,12],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[11],"name":"TouchLED11","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[10],"name":"Optical10","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[5],"name":"Bumper5","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[6],"name":"Distance6","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT7, 1, false);\nmotor RightDriveSmart = motor(PORT12, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\ntouchled TouchLED11 = touchled(PORT11);\noptical Optical10 = optical(PORT10);\nbumper Bumper5 = bumper(PORT5);\ndistance Distance6 = distance(PORT6);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Generated code.\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable, count;\n\nevent message1 = event();\n\n// \"when buttonRight pressed\" hat block\nvoid onevent_buttonRight_pressed_0() {\n  count = count + 1000.0;\n  Brain.Screen.clearScreen();\n  Brain.Screen.setPenColor(red);\n  TouchLED11.setColor(red);\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.print(\"HACKED\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"1000 points added\");\n  Brain.Screen.newLine();\n  wait(5.0, seconds);\n  TouchLED11.setColor(colorType::none);\n  Brain.Screen.setPenColor(white);\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Drivetrain.drive(forward);\n  while (true) {\n    if (Distance6.objectDistance(inches) < 6.0) {\n      count = count + 1.0;\n      Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(count));\n      Brain.Screen.newLine();\n      waitUntil((Distance6.objectDistance(inches) > 12.0));\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n// \"when buttonLeft pressed\" hat block\nvoid onevent_buttonLeft_pressed_0() {\n  count = 0.0;\n  Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(count));\n}\n\n// \"when TouchLED11 pressed\" hat block\nvoid onevent_TouchLED11_pressed_0() {\n  Brain.Screen.setCursor(1, 1);\n  Brain.Screen.clearScreen();\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // register event handlers\n  Brain.buttonRight.pressed(onevent_buttonRight_pressed_0);\n  Brain.buttonLeft.pressed(onevent_buttonLeft_pressed_0);\n  TouchLED11.pressed(onevent_TouchLED11_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}