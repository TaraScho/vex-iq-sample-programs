{"mode":"Blocks","hardwareTarget":"brain","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable></variables><comment id=\"2m)16?y+f(2?oM]D2Tl:\" x=\"709\" y=\"146\" h=\"522\" w=\"479\">Red light green light program to demonstrate the OPTICAL sensor and using color in programming logic.\n\nIf the optical sensor detects a green object, the robot drives forward until it is told to stop.\n\nIf the optical sensor detects a red object, the robot stops driving.\n\nDemonstrates:\n- OPTICAL sensor and color\n- Wait blocks\n\nBrain Supported: 2nd generation\n\nConfiguration:\nBaseBot with Sensors (Drivetrain 2-motor, Inertial)\nLeft Motor in Port 7\nRight Motor in Port 12\nTouchLED in Port 11\nOptical Sensor in Port 10\nDistance Sensor in Port 6\nBumper Switch in Port 5</comment><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"9\" y=\"31\"><next><block type=\"iq_control_forever\" id=\"NBp-_r,74MP}I3r-2mwD\"><statement name=\"SUBSTACK\"><block type=\"iq_control_wait_until\" id=\"qk,y|Ri3hs]~`_:XsAh#\"><value name=\"CONDITION\"><block type=\"iq_sensing_optical_detect\" id=\"NbX3-v(fj{2Tkh-vm[(V\"><field name=\"OPTICAL\">Optical10</field><field name=\"COLORS\">green</field></block></value><next><block type=\"iq_other_comment\" id=\"FA]hY@{fn!!r]3(.VS=j\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"G1AnShXO*b=UNi*GJ=Vs\"><field name=\"comment\">Greenlight</field></shadow></value><next><block type=\"iq_drivetrain_drive\" id=\"U2/x8_XHbv|jsI@g,(B7\"><field name=\"DIRECTION\">fwd</field><next><block type=\"iq_looks_print_new\" id=\"z#O-+V?(fji,8gb0htf:\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"HI_p|}yAbgZiBP7+``L#\"><field name=\"TEXT\">Greenlight</field></shadow></value><next><block type=\"iq_looks_next_row_new\" id=\"eZG3?*9m}1VB*:.X@tb3\"><field name=\"TARGET\">Brain</field><next><block type=\"iq_control_wait_until\" id=\"s`E,Ni#:+P2~Kdysz=O?\"><value name=\"CONDITION\"><block type=\"iq_sensing_optical_detect\" id=\"o*t;^]zKQ3nfwFc4Dn38\"><field name=\"OPTICAL\">Optical10</field><field name=\"COLORS\">red</field></block></value><next><block type=\"iq_other_comment\" id=\"u`k%DU_MwEPa!ARy?:s}\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"MrM$sUsZO|5qWNhgNN3F\"><field name=\"comment\">Redlight</field></shadow></value><next><block type=\"iq_motion_stop_driving\" id=\"Kps?N0heIAC$N|3i@tLH\"><next><block type=\"iq_looks_print_new\" id=\"(KWr_`(qYEDjvj6]R#vh\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"SjP-=Sz2sa-%AAUi2r$Y\"><field name=\"TEXT\">Redlight</field></shadow></value><next><block type=\"iq_looks_next_row_new\" id=\"/cw4]K,0dg7n[:@9dmKx\"><field name=\"TARGET\">Brain</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></xml>","robotConfig":[{"port":[7,12],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"integrated","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[11],"name":"TouchLED11","customName":false,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[10],"name":"Optical10","customName":false,"deviceType":"Optical","deviceClass":"optical","setting":{},"triportSourcePort":22},{"port":[5],"name":"Bumper5","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22},{"port":[6],"name":"Distance6","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT7, 1, false);\nmotor RightDriveSmart = motor(PORT12, 1, true);\n\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, BrainInertial, 200);\n\ntouchled TouchLED11 = touchled(PORT11);\noptical Optical10 = optical(PORT10);\nbumper Bumper5 = bumper(PORT5);\ndistance Distance6 = distance(PORT6);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\nbool vexcode_initial_drivetrain_calibration_completed = false;\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Inertial\");\n  BrainInertial.calibrate();\n  while (BrainInertial.isCalibrating()) {\n    wait(25, msec);\n  }\n  vexcode_initial_drivetrain_calibration_completed = true;\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\nvoid vexcodeInit() {\n\n  // Calibrate the Drivetrain\n  calibrateDrivetrain();\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Generated code.\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  while (true) {\n    waitUntil((Optical10.color() == green));\n    // Greenlight\n    Drivetrain.drive(forward);\n    Brain.Screen.print(\"Greenlight\");\n    Brain.Screen.newLine();\n    waitUntil((Optical10.color() == red));\n    // Redlight\n    Drivetrain.stop();\n    Brain.Screen.print(\"Redlight\");\n    Brain.Screen.newLine();\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  whenStarted1();\n}","target":"Physical"}